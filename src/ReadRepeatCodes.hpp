#ifndef SHASTA_READ_REPEAT_CODES_HPP
#define SHASTA_READ_REPEAT_CODES_HPP



/******************************************************************************

Class ReadRepeatCodes is used to store the repeat codes
for all reads in an assembly and to provide access to them.

There are two modes of operation:

0. (Mode::Standard) The standard mode of operation, where  reads were generated by a
typical base caller that does not use Run-Length Encoding (RLE).
In this mode of operation, we simply count the number of consecutive
identical bases generated by the base caller, and store this as
the repeat code for the RLE base. Therefore, in this mode
of operation repeat codes have the simple interpretation of
the repeat count assigned by the base caller.

1. (Mode::probabilistic) The probabilistic mode of operation,
where reads were generated by a
base caller that generates RLE sequence, with a probability
distribution for the repeat count at each position.
In this mode of operation, each of the 256 possible repeat codes
corresponds to a probability distribution of repeat counts.
For example, repeat code 173 might correspond to a probability
distribution of repeat count r, P(r), with
P(2)=0.1, P(3)=0.8, P(4)=0.05, P(5)=0.05.

In both cases, the Bayesian consensus caller associates a P(r)
for each value of r. For case 1, P(r) is typically peaked at repeat
count r, but for case 2 this is not the case.

In both cases, there is a nominal repeat count N(r) associated
with each repeat code r. In case 1, N(r)=r.
In case 2, N(r) must be given. In the example above, N(173) = 3.
The nominal repeat count is only used for two purposes:

- By consensus callers different from the Bayesian consensus caller.
- To display read sequences.

Note that N(r) is not used for assembly purposes when using the
Bayesian consensus caller.

THE PROBABILISTIC MODE OF OPERATION IS UNDER DEVELOPMENT.

******************************************************************************/

// Shasta.
#include "MemoryMappedVectorOfVectors.hpp"
#include "ReadId.hpp"

// Standard library.
#include "array.hpp"
#include "string.hpp"

namespace shasta {
    class ReadRepeatCodes;
}



class shasta::ReadRepeatCodes {
public:

    void createNew(const string& name, uint64_t pageSize);
    void accessExisting(const string& name);

    // Function called to set the probabilistic mode of operation.
    // and specify the nominal repeat count corresponding to each
    // repeat code.
    // If this is not called, the standard mode of operation is used.
    void setProbabilisticMode(const array<uint8_t, 256>& nominalRepeatCount);

    // Get the repeat code at an RLE position of a read.
    uint8_t getRepeatCode(ReadId readId, uint32_t position) const
    {
        return readRepeatCodes.begin(readId)[position];
    }

    // Get the nominal repeat count at an RLE position of a read.
    // When using the standard mode of opersation, this is the same
    // as the repeat code.
    uint8_t getNominalRepeatCount(ReadId readId, uint32_t position) const
    {
        const uint8_t repeatCode = readRepeatCodes.begin(readId)[position];
        if(mode == Mode::Standard) {
            return repeatCode;
        } else {
            return nominalRepeatCount[repeatCode];
        }
    }


private:

    // Flag that specifies the mode of operation.
    enum class Mode {Standard=0, Probabilistic=1};
    Mode mode = Mode::Standard;

    // The nominal repeat count corresponding to each repeat code.
    // This is only used for Mode::Probabilistic.
    array<uint8_t, 256> nominalRepeatCount;

    // The repeat codes of all the reads.
    // Indexed by [readId][position].
    MemoryMapped::VectorOfVectors<uint8_t, uint64_t> readRepeatCodes;
};

#endif

