# Shasta configuration file suitable for
# a human assembly with coverage around 40x.
# Such a run will require a machine with approximately 800 GB of RAM.

# If running on AWS EC2, a instance type x1.16xlarge is recommended
# and the assembly should take under one day to complete.
# This instance type has on demand price around $7/hour, 
# spot price around $2/hour.

# Most of the memory must be configured to use Linux huge pages (2 MB pages). 
# This can be done using shasta-install/bin/SetupHugePages.py.

# This file must be copied to the run directory and named shasta.conf.
# It can be edited as needed to experiment with assembly parameters.

# This file is only seen by Python scripts, not by C++ code.
# All parameters are passed to C++ code via arguments.



[Reads]

# The minimum read length. Reads shorter than this
# are skipped on input.
minReadLength = 1000



[Kmers]

# This section contains parameters that control the
# generation of k-mers to be used as markers.

# The length of the k-mers used as markers.
k = 8

# The probability that a k-mer is a marker.
# This is approximately equal to the fraction
# of k-mers that will be used as markers.
probability = 0.1



[MinHash]

# This section contains parameters that control the MinHash algorithm.

# The number of consecutive markers that define a MinHash feature.
m = 4

# The number of MinHash iterations.
minHashIterationCount = 100

# The base 2 log of the number of buckets used by the MinHash
# algorithm. This must be at least equal to the base 2 log
# of the number of reads plus 3.
# The value below is appropriate for a human size assembly
# with up to 16M reads.
log2MinHashBucketCount = 27

# The maximum bucket size to be used by the MinHash algoritm.
# Buckets larger than this are ignored.
maxBucketSize = 30

# The minimum number of times a pair of oriented reads
# is found by the MinHash algorithm for the pair to
# generate an overlap.
minFrequency = 1



[Align]

# This section contains parameters that control the alignment of
# oriented reads using an alignment graph.

# The maximum number of markers that an alignment is allowed
# to skip on either of the oriented reads being aligned.
maxSkip = 30

# The maximum number of vertices that a k-mer is allowed to generate.
# This is necessary to prevent combinatorial explosion
# of the computational cost of computing alignments 
# for highly repetitive sequence.
maxVertexCountPerKmer = 100

# The minimum number of aligned markers in an alignment
# in order for the alignment to be considered good and usable.
minAlignedMarkerCount = 100

# The maximum number of trim bases tolerated at the
# beginning and end of an alignment. There can be
# up this number of bases between the first/last marker
# and the beginning/end of either oriented read
# for an alignment to be considered good and usable. 
maxTrim = 200



[ReadGraph]

# This section contains parameters that control
# the creation and processing of read graphs.

# The minimum size (number of oriented reads) of
# a connected component to be kept.
minComponentSize = 100



[MarkerGraph]

# This section contains parameters that control
# the creation and processing of marker graphs.

# The minimum number of reads for a vertex (marker) 
# to be considered strong.
minCoverage = 3

# The minimum number of concordant reads for an edge
# to be considered strong.
# This does not currently affect any processing.
minConsensus = 3

